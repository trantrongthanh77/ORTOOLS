/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: constraint_solver.i


extern
#ifdef __cplusplus
  "C"
#endif
  void cgo_panic__constraint_solver_d99545c0cb2236b6(const char*);
static void _swig_gopanic(const char *p) {
  cgo_panic__constraint_solver_d99545c0cb2236b6(p);
}



#define SWIG_VERSION 0x040101
#define SWIGGO
#define SWIGMODULE constraint_solver
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef ptrdiff_t intgo;
typedef size_t uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "constraint_solver.h"


#include <string>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< double > >::const_reference std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(std::vector< std::vector< double > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(std::vector< std::vector< double > > *self,int i,std::vector< std::vector< double > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< int > >::const_reference std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(std::vector< std::vector< int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(std::vector< std::vector< int > > *self,int i,std::vector< std::vector< int > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_constraint_solver_d99545c0cb2236b6(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_constraint_solver_d99545c0cb2236b6(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_DataModel_distance_matrix_set_constraint_solver_d99545c0cb2236b6(constraint_solver::DataModel *_swig_go_0, std::vector< std::vector< double > > *_swig_go_1) {
  constraint_solver::DataModel *arg1 = (constraint_solver::DataModel *) 0 ;
  std::vector< std::vector< double > > *arg2 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = *(constraint_solver::DataModel **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< double > > **)&_swig_go_1; 
  
  if (arg1) (arg1)->distance_matrix = *arg2;
  
}


std::vector< std::vector< double > > *_wrap_DataModel_distance_matrix_get_constraint_solver_d99545c0cb2236b6(constraint_solver::DataModel *_swig_go_0) {
  constraint_solver::DataModel *arg1 = (constraint_solver::DataModel *) 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > > *_swig_go_result;
  
  arg1 = *(constraint_solver::DataModel **)&_swig_go_0; 
  
  result = (std::vector< std::vector< double > > *)& ((arg1)->distance_matrix);
  *(std::vector< std::vector< double > > **)&_swig_go_result = (std::vector< std::vector< double > > *)result; 
  return _swig_go_result;
}


void _wrap_DataModel_num_vehicles_set_constraint_solver_d99545c0cb2236b6(constraint_solver::DataModel *_swig_go_0, intgo _swig_go_1) {
  constraint_solver::DataModel *arg1 = (constraint_solver::DataModel *) 0 ;
  int arg2 ;
  
  arg1 = *(constraint_solver::DataModel **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->num_vehicles = arg2;
  
}


intgo _wrap_DataModel_num_vehicles_get_constraint_solver_d99545c0cb2236b6(constraint_solver::DataModel *_swig_go_0) {
  constraint_solver::DataModel *arg1 = (constraint_solver::DataModel *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(constraint_solver::DataModel **)&_swig_go_0; 
  
  result = (int) ((arg1)->num_vehicles);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DataModel_depot_set_constraint_solver_d99545c0cb2236b6(constraint_solver::DataModel *_swig_go_0, operations_research::RoutingIndexManager::NodeIndex *_swig_go_1) {
  constraint_solver::DataModel *arg1 = (constraint_solver::DataModel *) 0 ;
  operations_research::RoutingIndexManager::NodeIndex arg2 ;
  operations_research::RoutingIndexManager::NodeIndex *argp2 ;
  
  arg1 = *(constraint_solver::DataModel **)&_swig_go_0; 
  
  argp2 = (operations_research::RoutingIndexManager::NodeIndex *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null operations_research::RoutingIndexManager::NodeIndex");
  }
  arg2 = (operations_research::RoutingIndexManager::NodeIndex)*argp2;
  
  
  if (arg1) (arg1)->depot = arg2;
  
}


operations_research::RoutingIndexManager::NodeIndex *_wrap_DataModel_depot_get_constraint_solver_d99545c0cb2236b6(constraint_solver::DataModel *_swig_go_0) {
  constraint_solver::DataModel *arg1 = (constraint_solver::DataModel *) 0 ;
  operations_research::RoutingIndexManager::NodeIndex result;
  operations_research::RoutingIndexManager::NodeIndex *_swig_go_result;
  
  arg1 = *(constraint_solver::DataModel **)&_swig_go_0; 
  
  result =  ((arg1)->depot);
  *(operations_research::RoutingIndexManager::NodeIndex **)&_swig_go_result = new operations_research::RoutingIndexManager::NodeIndex(result); 
  return _swig_go_result;
}


void _wrap_DataModel_vehicle_capacities_set_constraint_solver_d99545c0cb2236b6(constraint_solver::DataModel *_swig_go_0, std::vector< int64_t > *_swig_go_1) {
  constraint_solver::DataModel *arg1 = (constraint_solver::DataModel *) 0 ;
  std::vector< int64_t > *arg2 = (std::vector< int64_t > *) 0 ;
  
  arg1 = *(constraint_solver::DataModel **)&_swig_go_0; 
  arg2 = *(std::vector< int64_t > **)&_swig_go_1; 
  
  if (arg1) (arg1)->vehicle_capacities = *arg2;
  
}


std::vector< int64_t > *_wrap_DataModel_vehicle_capacities_get_constraint_solver_d99545c0cb2236b6(constraint_solver::DataModel *_swig_go_0) {
  constraint_solver::DataModel *arg1 = (constraint_solver::DataModel *) 0 ;
  std::vector< int64_t > *result = 0 ;
  std::vector< int64_t > *_swig_go_result;
  
  arg1 = *(constraint_solver::DataModel **)&_swig_go_0; 
  
  result = (std::vector< int64_t > *)& ((arg1)->vehicle_capacities);
  *(std::vector< int64_t > **)&_swig_go_result = (std::vector< int64_t > *)result; 
  return _swig_go_result;
}


void _wrap_DataModel_pickups_deliveries_set_constraint_solver_d99545c0cb2236b6(constraint_solver::DataModel *_swig_go_0, std::vector< std::vector< int > > *_swig_go_1) {
  constraint_solver::DataModel *arg1 = (constraint_solver::DataModel *) 0 ;
  std::vector< std::vector< int > > *arg2 = (std::vector< std::vector< int > > *) 0 ;
  
  arg1 = *(constraint_solver::DataModel **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< int > > **)&_swig_go_1; 
  
  if (arg1) (arg1)->pickups_deliveries = *arg2;
  
}


std::vector< std::vector< int > > *_wrap_DataModel_pickups_deliveries_get_constraint_solver_d99545c0cb2236b6(constraint_solver::DataModel *_swig_go_0) {
  constraint_solver::DataModel *arg1 = (constraint_solver::DataModel *) 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  std::vector< std::vector< int > > *_swig_go_result;
  
  arg1 = *(constraint_solver::DataModel **)&_swig_go_0; 
  
  result = (std::vector< std::vector< int > > *)& ((arg1)->pickups_deliveries);
  *(std::vector< std::vector< int > > **)&_swig_go_result = (std::vector< std::vector< int > > *)result; 
  return _swig_go_result;
}


constraint_solver::DataModel *_wrap_new_DataModel_constraint_solver_d99545c0cb2236b6() {
  constraint_solver::DataModel *result = 0 ;
  constraint_solver::DataModel *_swig_go_result;
  
  
  result = (constraint_solver::DataModel *)new constraint_solver::DataModel();
  *(constraint_solver::DataModel **)&_swig_go_result = (constraint_solver::DataModel *)result; 
  return _swig_go_result;
}


void _wrap_delete_DataModel_constraint_solver_d99545c0cb2236b6(constraint_solver::DataModel *_swig_go_0) {
  constraint_solver::DataModel *arg1 = (constraint_solver::DataModel *) 0 ;
  
  arg1 = *(constraint_solver::DataModel **)&_swig_go_0; 
  
  delete arg1;
  
}


constraint_solver::RoutingWrapper *_wrap_new_RoutingWrapper_constraint_solver_d99545c0cb2236b6() {
  constraint_solver::RoutingWrapper *result = 0 ;
  constraint_solver::RoutingWrapper *_swig_go_result;
  
  
  result = (constraint_solver::RoutingWrapper *)new constraint_solver::RoutingWrapper();
  *(constraint_solver::RoutingWrapper **)&_swig_go_result = (constraint_solver::RoutingWrapper *)result; 
  return _swig_go_result;
}


void _wrap_RoutingWrapper_InitDataModel_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, std::vector< std::vector< double > > *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  std::vector< std::vector< double > > arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< std::vector< double > > *argp2 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  argp2 = (std::vector< std::vector< double > > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::vector< double > >");
  }
  arg2 = (std::vector< std::vector< double > >)*argp2;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  (arg1)->InitDataModel(arg2,arg3,arg4);
  
}


constraint_solver::DataModel *_wrap_RoutingWrapper_getData_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  constraint_solver::DataModel result;
  constraint_solver::DataModel *_swig_go_result;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  result = (arg1)->getData();
  *(constraint_solver::DataModel **)&_swig_go_result = new constraint_solver::DataModel(result); 
  return _swig_go_result;
}


void _wrap_RoutingWrapper_CreateRoutingIndexManager_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, constraint_solver::DataModel *_swig_go_1) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  constraint_solver::DataModel arg2 ;
  constraint_solver::DataModel *argp2 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  argp2 = (constraint_solver::DataModel *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null constraint_solver::DataModel");
  }
  arg2 = (constraint_solver::DataModel)*argp2;
  
  
  (arg1)->CreateRoutingIndexManager(arg2);
  
}


void _wrap_RoutingWrapper_CreateRoutingModel_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  (arg1)->CreateRoutingModel();
  
}


void _wrap_RoutingWrapper_AddPickupsAndDeliveris_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, std::vector< std::vector< int > > *_swig_go_1) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  std::vector< std::vector< int > > arg2 ;
  std::vector< std::vector< int > > *argp2 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  argp2 = (std::vector< std::vector< int > > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::vector< int > >");
  }
  arg2 = (std::vector< std::vector< int > >)*argp2;
  
  
  (arg1)->AddPickupsAndDeliveris(arg2);
  
}


void _wrap_RoutingWrapper_AddVehicleCapacities_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, std::vector< int > *_swig_go_1) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  std::vector< int > arg2 ;
  std::vector< int > *argp2 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  argp2 = (std::vector< int > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< int >");
  }
  arg2 = (std::vector< int >)*argp2;
  
  
  (arg1)->AddVehicleCapacities(arg2);
  
}


intgo _wrap_RoutingWrapper_RegisterTransitCallback_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  result = (int)(arg1)->RegisterTransitCallback();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RoutingWrapper_RegisterDemandCallback_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, std::vector< int > *_swig_go_1) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  std::vector< int > arg2 ;
  std::vector< int > *argp2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  argp2 = (std::vector< int > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< int >");
  }
  arg2 = (std::vector< int >)*argp2;
  
  
  result = (int)(arg1)->RegisterDemandCallback(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RoutingWrapper_AddDimension_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, bool _swig_go_4, _gostring_ _swig_go_5) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  result = (bool)(arg1)->AddDimension(arg2,arg3,arg4,arg5,(std::string const &)*arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RoutingWrapper_AddDimensionWithVehicleCapacity_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, bool _swig_go_3, _gostring_ _swig_go_4) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  std::string arg5 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  (&arg5)->assign(_swig_go_4.p, _swig_go_4.n); 
  
  result = (bool)(arg1)->AddDimensionWithVehicleCapacity(arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RoutingWrapper_SetGlobalSpanCostCoefficient_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  std::string arg2 ;
  int arg3 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (int)_swig_go_2; 
  
  (arg1)->SetGlobalSpanCostCoefficient(arg2,arg3);
  
}


void _wrap_RoutingWrapper_AddPickupAndDeliveryConstraint_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, _gostring_ _swig_go_1) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  std::string arg2 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  (arg1)->AddPickupAndDeliveryConstraint(arg2);
  
}


void _wrap_RoutingWrapper_CreateDefaultRoutingSearchParameters_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  (arg1)->CreateDefaultRoutingSearchParameters();
  
}


void _wrap_RoutingWrapper_SetFirstSolutionStrategy_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, _gostring_ _swig_go_1) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  std::string arg2 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  (arg1)->SetFirstSolutionStrategy(arg2);
  
}


void _wrap_RoutingWrapper_SetLocalSearchMetaheuristic_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, _gostring_ _swig_go_1) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  std::string arg2 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  (arg1)->SetLocalSearchMetaheuristic(arg2);
  
}


void _wrap_RoutingWrapper_SetMutableTimeLimit_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0, intgo _swig_go_1) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  int arg2 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  (arg1)->SetMutableTimeLimit(arg2);
  
}


void _wrap_RoutingWrapper_SolveWithCurrentParameters_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  (arg1)->SolveWithCurrentParameters();
  
}


void _wrap_RoutingWrapper_PrintSolution_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  (arg1)->PrintSolution();
  
}


void _wrap_delete_RoutingWrapper_constraint_solver_d99545c0cb2236b6(constraint_solver::RoutingWrapper *_swig_go_0) {
  constraint_solver::RoutingWrapper *arg1 = (constraint_solver::RoutingWrapper *) 0 ;
  
  arg1 = *(constraint_solver::RoutingWrapper **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< double > *_wrap_new_DoubleVector__SWIG_0_constraint_solver_d99545c0cb2236b6() {
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


std::vector< double > *_wrap_new_DoubleVector__SWIG_1_constraint_solver_d99545c0cb2236b6(long long _swig_go_0) {
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


std::vector< double > *_wrap_new_DoubleVector__SWIG_2_constraint_solver_d99545c0cb2236b6(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


long long _wrap_DoubleVector_size_constraint_solver_d99545c0cb2236b6(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = ((std::vector< double > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_DoubleVector_capacity_constraint_solver_d99545c0cb2236b6(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = ((std::vector< double > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DoubleVector_reserve_constraint_solver_d99545c0cb2236b6(std::vector< double > *_swig_go_0, long long _swig_go_1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_DoubleVector_isEmpty_constraint_solver_d99545c0cb2236b6(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DoubleVector_clear_constraint_solver_d99545c0cb2236b6(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_DoubleVector_add_constraint_solver_d99545c0cb2236b6(std::vector< double > *_swig_go_0, double _swig_go_1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (std::vector< double >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  
}


double _wrap_DoubleVector_get_constraint_solver_d99545c0cb2236b6(std::vector< double > *_swig_go_0, intgo _swig_go_1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  double _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (double)*result; 
  return _swig_go_result;
}


void _wrap_DoubleVector_set_constraint_solver_d99545c0cb2236b6(std::vector< double > *_swig_go_0, intgo _swig_go_1, double _swig_go_2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< double >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_DoubleVector_constraint_solver_d99545c0cb2236b6(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::vector< double > > *_wrap_new_DistanceMatrix__SWIG_0_constraint_solver_d99545c0cb2236b6() {
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > > *_swig_go_result;
  
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  *(std::vector< std::vector< double > > **)&_swig_go_result = (std::vector< std::vector< double > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< double > > *_wrap_new_DistanceMatrix__SWIG_1_constraint_solver_d99545c0cb2236b6(long long _swig_go_0) {
  std::vector< std::vector< double > >::size_type arg1 ;
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
  *(std::vector< std::vector< double > > **)&_swig_go_result = (std::vector< std::vector< double > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< double > > *_wrap_new_DistanceMatrix__SWIG_2_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double > > const &)*arg1);
  *(std::vector< std::vector< double > > **)&_swig_go_result = (std::vector< std::vector< double > > *)result; 
  return _swig_go_result;
}


long long _wrap_DistanceMatrix_size_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_DistanceMatrix_capacity_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DistanceMatrix_reserve_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< double > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_DistanceMatrix_isEmpty_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DistanceMatrix_clear_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_DistanceMatrix_add_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< double > > *_swig_go_0, std::vector< double > *_swig_go_1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< double > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::vector< double > >::value_type const &)*arg2);
  
}


std::vector< double > *_wrap_DistanceMatrix_get_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< double > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::vector< double > >::value_type *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< std::vector< double > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DistanceMatrix_set_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< double > > *_swig_go_0, intgo _swig_go_1, std::vector< double > *_swig_go_2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::vector< double > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_DistanceMatrix_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< int > *_wrap_new_IntVector__SWIG_0_constraint_solver_d99545c0cb2236b6() {
  std::vector< int > *result = 0 ;
  std::vector< int > *_swig_go_result;
  
  
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&_swig_go_result = (std::vector< int > *)result; 
  return _swig_go_result;
}


std::vector< int > *_wrap_new_IntVector__SWIG_1_constraint_solver_d99545c0cb2236b6(long long _swig_go_0) {
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  std::vector< int > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&_swig_go_result = (std::vector< int > *)result; 
  return _swig_go_result;
}


std::vector< int > *_wrap_new_IntVector__SWIG_2_constraint_solver_d99545c0cb2236b6(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  std::vector< int > *_swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  *(std::vector< int > **)&_swig_go_result = (std::vector< int > *)result; 
  return _swig_go_result;
}


long long _wrap_IntVector_size_constraint_solver_d99545c0cb2236b6(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  result = ((std::vector< int > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_IntVector_capacity_constraint_solver_d99545c0cb2236b6(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  result = ((std::vector< int > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IntVector_reserve_constraint_solver_d99545c0cb2236b6(std::vector< int > *_swig_go_0, long long _swig_go_1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_IntVector_isEmpty_constraint_solver_d99545c0cb2236b6(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  result = (bool)((std::vector< int > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IntVector_clear_constraint_solver_d99545c0cb2236b6(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_IntVector_add_constraint_solver_d99545c0cb2236b6(std::vector< int > *_swig_go_0, intgo _swig_go_1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (std::vector< int >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  
  
}


intgo _wrap_IntVector_get_constraint_solver_d99545c0cb2236b6(std::vector< int > *_swig_go_0, intgo _swig_go_1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  intgo _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (int)*result; 
  return _swig_go_result;
}


void _wrap_IntVector_set_constraint_solver_d99545c0cb2236b6(std::vector< int > *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< int >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  
}


void _wrap_delete_IntVector_constraint_solver_d99545c0cb2236b6(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::vector< int > > *_wrap_new_PairIntVector__SWIG_0_constraint_solver_d99545c0cb2236b6() {
  std::vector< std::vector< int > > *result = 0 ;
  std::vector< std::vector< int > > *_swig_go_result;
  
  
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
  *(std::vector< std::vector< int > > **)&_swig_go_result = (std::vector< std::vector< int > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< int > > *_wrap_new_PairIntVector__SWIG_1_constraint_solver_d99545c0cb2236b6(long long _swig_go_0) {
  std::vector< std::vector< int > >::size_type arg1 ;
  std::vector< std::vector< int > > *result = 0 ;
  std::vector< std::vector< int > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1);
  *(std::vector< std::vector< int > > **)&_swig_go_result = (std::vector< std::vector< int > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< int > > *_wrap_new_PairIntVector__SWIG_2_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< int > > *_swig_go_0) {
  std::vector< std::vector< int > > *arg1 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  std::vector< std::vector< int > > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< int > > **)&_swig_go_0; 
  
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >((std::vector< std::vector< int > > const &)*arg1);
  *(std::vector< std::vector< int > > **)&_swig_go_result = (std::vector< std::vector< int > > *)result; 
  return _swig_go_result;
}


long long _wrap_PairIntVector_size_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< int > > *_swig_go_0) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< int > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< int > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_PairIntVector_capacity_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< int > > *_swig_go_0) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< int > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< int > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PairIntVector_reserve_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< int > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::vector< int > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_PairIntVector_isEmpty_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< int > > *_swig_go_0) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::vector< int > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::vector< int > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PairIntVector_clear_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< int > > *_swig_go_0) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< int > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_PairIntVector_add_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< int > > *_swig_go_0, std::vector< int > *_swig_go_1) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::vector< int > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< int > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::vector< int > >::value_type const &)*arg2);
  
}


std::vector< int > *_wrap_PairIntVector_get_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< int > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  std::vector< int > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< int > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::vector< int > >::value_type *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< std::vector< int > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PairIntVector_set_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< int > > *_swig_go_0, intgo _swig_go_1, std::vector< int > *_swig_go_2) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::vector< int > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::vector< int > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_PairIntVector_constraint_solver_d99545c0cb2236b6(std::vector< std::vector< int > > *_swig_go_0) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< int > > **)&_swig_go_0; 
  
  delete arg1;
  
}


#ifdef __cplusplus
}
#endif

